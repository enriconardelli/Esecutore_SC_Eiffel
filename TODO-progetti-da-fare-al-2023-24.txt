
PROCESSO
- stiamo usando GitHub come ambiente gestione di ticket

RILEVAMENTO DEGLI ERRORI
==> trasformare errore_costruzione_SC in INTEGER invece che boolean e usare questi valori interi per assert più precise nelle feature di test (in realtà al momento c'è solo una feature di test che usa errore_costruzione_SC)
==> esaminare tutti i punti del progetto in cui errore_costruzione_SC viene assegnato a true e elencare la tipologia di errore e capire se è possibile individuare una classificazione gerarchica

INTERESSANTE
- gestione della negazione delle condizioni booleane

INTERESSANTE
- gestione della condizione di essere in uno stato mediante feature 'attivo' di array degli stati e non mediante le variabili booleane (accoppiato a scrittura "cond" come "in STATO" invece che "S"?)

INTERESSANTE MA DIFFICILE
- aggiungere azioni di pulizia della storia deep e shallow

MENO INTERESSANTE
- trasformare STATO-GERARCHICO in deferred (spiegata più sotto)

INTERESSANTE MA DA VERIFICARE QUANTO COMPLICATO
- la feature `transizione_abilitata' in STATO restituisce l'ultima (nell'array delle transizioni, che è l'ordine con cui le transizioni per quello stato sono state descritte nel file .xml) transizione abilitata con l'evento o gli eventi correnti
 - se si tratta di più transizioni con stesso evento allora andrebbe segnalato in una fase di analisi della SC ed andrebbe indicato che vanno introdotte le priorità esplicite (di cui va realizzata l'implementazione)
 - se si tratta di più transizioni con eventi diversi la segnalazione a livello di analisi della SC non ha molto senso (visto che presumibilmente voglio che in uno stato con eventi diversi faccia cose diverse) ma andrebbe segnalato il non determinismo a tempo di esecuzione, accorgendosi che in quel momento è abilitata più di una transizione

COMPLICATO E POCO UTILE 
- verificare sequenza di comportamenti, come per esempio gli stati attraversati da una SC a seguito di eventi, per evitare di dover fare tanti test ognuno con una sottosequenza degli eventi e verifica dello stato finale

POCO UTILE
- controllare in ESECUTORE l'esecuzione delle azioni nel caso di sorgenti e transizioni multiple. Attualmente si verifica solo l'esecuzione delle azioni di assegnazione di variabili booleane e intere, quindi non si verifica l'esecuzione delle azioni di log, e si fanno le verifiche SOLO per transizioni né FORK né MERGE



FATTO - semplificare tutte le varie feature di test introducendo una nuova feature cui vengono passati i nomi dei due file con l'esempio e l'input e l'elenco degli stati finali in cui si deve trovare la SC e che svolge quanto viene attualmente ripetuto in ogni feature di test

FATTO IN PARTE - migliorare la gestione degli ERRORI e AVVISI nella costruzione della state_chart in modo da bloccare nel caso di ERRORE

-- FATTO: classe STATO da ristrutturare trasformandola in deferred con due sotto-classi per stati atomici e gerarchici,
-- STATO_ATOMICO è effective, anche STATO_GERARCHICO lo è 
-- con sotto-classi effective STATO_XOR e STATO_AND
STATO_GERARCHICO dovrebbe essere deferred ma non può esserlo perché in STATO_TEST viene istanziata: risolvere mediante istanziazione di due entità di tipo STATO_XOR e STATO_AND
nel processo di rifattorizzazione va modificata anche la feature istanzia_stati di CONFIGURAZIONE



esaminare elenco di azioni, eventi e condizioni predefiniti descritti nelle slide e decidere quali aggiungere al progetto


TODO:
  ESECUTORE: 7
  CONFIGURAZIONE: 18
  STATO: 7


============================================================================
--------------
SULLE AZIONI
--------------

Vi sono i seguenti eventi predefiniti legati alle azioni:

started(A)   : Viene generato quando l’azione A inizia, comunque inizi
stopped(A) : Viene generato quando l’azione A termina, sia per proprio conto sia perché viene interrotta

Vi sono le seguenti azioni predefinite legate alle azioni:

start(A)	: Viene avviata l’azione A
stop(A)	: Viene interrotta l’azione A (e non può più essere continuata, ma deve essere avviata di nuovo dall’inizio)
suspend(A)	: Viene sospesa l’azione A
resume(A)	: Viene ripresa l’azione A
schedule(A,N) [sh!(A,N)]: L’azione A viene pianificata per essere eseguita all’N-ma unità di tempo successiva a quella corrente
N.B.: tra parentesi quadre compare la forma abbreviata

Vi sono le seguenti condizioni predefinite legate alle azioni:

active(A)		: Vale true quando l’azione A è in esecuzione, false se sospesa o terminata
hanging(A) 	: Vale true quando l’azione A è sospesa, false se in esecuzione o terminata
N.B.: possono essere entrambe false, mai entrambe vere


--------------
SUGLI STATI
--------------

Vi sono i seguenti eventi predefiniti legati agli stati:

entered(S)  [en(S)]  : Viene generato al momento dell’ingresso nello stato S
exited(S)  [ex(S)]	: Viene generato al momento dell’uscita dallo stato S
entering  [ns]  : Evento interno generato al momento dell’ingresso in uno stato
exiting  [xs]	: Evento interno generato al momento dell’uscita da uno stato
N.B.: tra parentesi quadre compare la forma abbreviata

Vi sono le seguenti azioni predefinite legate agli stati:

history_clear(S)	 [hc!(S)] : Si cancella la storia dello stato S
deep_clear(S)	 [dc!(S)] : Si cancella la storia dello stato S e di tutti i suoi discendenti

Vi sono le seguenti condizioni predefinite legate agli stati:

in(S)	: Vale true quando lo stato S fa parte della configurazione corrente,  vale false quando S non ne fa parte


--------------
ALTRI EVENTI E AZIONI PREDEFINITE
--------------
Vi sono i seguenti eventi predefiniti legati agli eventi:

timeout(E,N)  [tm(E,N)] : Viene generato quando sono passate N unità di tempo dall’ultima volta che l’evento E è accaduto
N.B.: tra parentesi quadre compare la forma abbreviata

Vi sono i seguenti eventi predefiniti legati alle condizioni:

true(C)	: Viene generato quando la condizione C passa da false a true
false(C)	: Viene generato quando la condizione C passa da true a false
N.B.: C deve essere una condizione atomica
changed(X) : Viene generato quando l’elemento X (condizione o dato) cambia valore

Vi sono le seguenti azioni predefinite legate alle condizioni:

make_true(C)	: Assegna true alla condizione C (equivale a C:=true)
make_false(C)	: Assegna false alla condizione C (equivale a C:=false)
N.B.: make_true(C) può non generare l’evento true(C) (idem per false )
